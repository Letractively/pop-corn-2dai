/*
 * (c) Copyright 2005-2011 JAXIO - Generated by Celerio, a Jaxio tool. http://www.jaxio.com
 */
package com.sun.faces.config;

import java.beans.FeatureDescriptor;
import java.util.Iterator;
import java.util.Locale;

import javax.el.ELContext;
import javax.el.ELResolver;
import javax.el.PropertyNotWritableException;
import javax.faces.context.FacesContext;

import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.web.jsf.FacesContextUtils;

/**
 * Make it possible to use 'resourceBundle' outside of WebFlow.
 * Largely inspired from org.springframework.webflow.expression.el.FlowResourceELResolver
 * You may read http://forum.springsource.org/archive/index.php/t-58825.html
 */
public class MvcResourceFacesELResolver extends ELResolver {

    static final String RESOURCE_BUNDLE_KEY = "resourceBundle";

    @Override
    public Object getValue(ELContext context, Object base, Object property) {
        if (base == null && RESOURCE_BUNDLE_KEY.equals(property)) {
            context.setPropertyResolved(true);
            return getMessageSource();
        } else if (base instanceof MessageSource) {
            MessageSource messageSource = (MessageSource) base;
            String message = messageSource.getMessage(property.toString(), null, null, getLocale());
            if (message != null) {
                context.setPropertyResolved(true);
                return message;
            }
        }
        return null;
    }

    @Override
    public Class<?> getType(ELContext context, Object base, Object property) {
        if (base == null && RESOURCE_BUNDLE_KEY.equals(property)) {
            context.setPropertyResolved(true);
            return MessageSource.class;
        } else if (base instanceof MessageSource) {
            MessageSource messageSource = (MessageSource) base;
            String message = messageSource.getMessage(property.toString(), null, null, getLocale());
            if (message != null) {
                context.setPropertyResolved(true);
                return String.class;
            }
        }
        return null;
    }

    @Override
    public void setValue(ELContext context, Object base, Object property, Object value) {
        if (base == null && RESOURCE_BUNDLE_KEY.equals(property)) {
            throw new PropertyNotWritableException("The '" + RESOURCE_BUNDLE_KEY
                    + "' implicit variable is not writable.");
        } else if (base instanceof MessageSource) {
            throw new PropertyNotWritableException("The MessageSource is not writable.");
        }
    }

    @Override
    public boolean isReadOnly(ELContext context, Object base, Object property) {
        if (base == null && RESOURCE_BUNDLE_KEY.equals(property)) {
            context.setPropertyResolved(true);
            return true;
        } else if (base instanceof MessageSource) {
            context.setPropertyResolved(true);
            return true;
        }
        return false;
    }

    @Override
    public Class<?> getCommonPropertyType(ELContext context, Object base) {
        if (base == null) {
            return MessageSource.class;
        } else if (base instanceof MessageSource) {
            return String.class;
        } else {
            return null;
        }
    }

    @Override
    public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext elContext, Object base) {
        return null;
    }

    protected Locale getLocale() {
        return LocaleContextHolder.getLocale();
    }

    protected MessageSource getMessageSource() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        return FacesContextUtils.getRequiredWebApplicationContext(facesContext);
    }
}